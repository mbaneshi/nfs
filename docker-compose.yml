version: '3.8'

services:
  # Caddy reverse proxy with HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: ${PROJECT_NAME:-nsf}_caddy
    restart: unless-stopped
    ports:
      - "${CADDY_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - /var/log/caddy:/var/log/caddy
    environment:
      - CADDY_EMAIL=${CADDY_EMAIL:-admin@edcopo.info}
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}
    depends_on:
      - web
      - backend
      - n8n
      - supabase

  # React web application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-nsf}_web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${API_URL:-https://api.edcopo.info}
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL:-https://db.edcopo.info}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./web:/app
      - /app/node_modules
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}
    depends_on:
      - backend
      - supabase

  # FastAPI backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-nsf}_backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - API_WORKERS=${API_WORKERS:-1}
      - API_RELOAD=${API_RELOAD:-true}
      - API_LOG_LEVEL=${API_LOG_LEVEL:-info}
      - SUPABASE_URL=${SUPABASE_URL:-https://db.edcopo.info}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_DB_URL=${SUPABASE_DB_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://app.edcopo.info}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
    volumes:
      - ./backend:/app
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}
    depends_on:
      - supabase

  # n8n automation platform
  n8n:
    image: n8nio/n8n:latest
    container_name: ${PROJECT_NAME:-nsf}_n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-0.0.0.0}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED:-false}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-false}
      - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED:-false}
      - N8N_TEMPLATES_ENABLED=${N8N_TEMPLATES_ENABLED:-false}
      - N8N_ONBOARDING_FLOW_DISABLED=${N8N_ONBOARDING_FLOW_DISABLED:-true}
      - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED:-false}
      - WEBHOOK_URL=${N8N_URL:-https://automation.edcopo.info}
      - GENERIC_TIMEZONE=UTC
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=supabase
      - DB_POSTGRESDB_PORT=54322
      - DB_POSTGRESDB_DATABASE=postgres
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${SUPABASE_DB_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
      - ./n8n/credentials:/home/node/.n8n/credentials
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}
    depends_on:
      - supabase

  # Supabase local development
  supabase:
    image: supabase/postgres:15.1.0.117
    container_name: ${PROJECT_NAME:-nsf}_supabase
    restart: unless-stopped
    ports:
      - "${SUPABASE_PORT:-54323}:54323"
      - "${SUPABASE_DB_PORT:-54322}:54322"
    environment:
      - POSTGRES_HOST=${SUPABASE_DB_HOST:-localhost}
      - POSTGRES_PORT=${SUPABASE_DB_PORT:-54322}
      - POSTGRES_DB=${SUPABASE_DB_NAME:-postgres}
      - POSTGRES_USER=${SUPABASE_DB_USER:-postgres}
      - POSTGRES_PASSWORD=${SUPABASE_DB_PASSWORD}
      - POSTGRES_DB_URL=${SUPABASE_DB_URL}
      - JWT_SECRET=${JWT_SECRET_KEY}
      - ANON_KEY=${SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./supabase/seed.sql:/docker-entrypoint-initdb.d/seed.sql:ro
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-nsf}_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ${DOCKER_NETWORK_NAME:-nsf_network}
    command: redis-server --appendonly yes

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  n8n_data:
    driver: local
  supabase_data:
    driver: local
  redis_data:
    driver: local

networks:
  ${DOCKER_NETWORK_NAME:-nsf_network}:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME:-nsf_network}
